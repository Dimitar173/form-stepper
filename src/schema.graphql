type AsClient {
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PostConnection!
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProposalConnection!
}

type AsTherapist {
  allPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PostConnection!
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProposalConnection!
}

type Client {
  age: String!
  city: String
  cityState: String
  country: String
  createdAt: ISO8601DateTime!
  id: ID!
  languages: [Language!]!
  onboardingStep: Int
  posts: [Post!]!
  state: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

"""
Autogenerated input type of ClientDelete
"""
input ClientDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ClientDelete
"""
type ClientDeletePayload {
  client: Client!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ClientUpdate
"""
input ClientUpdateInput {
  birthdate: String!
  city: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String!
  state: String!
}

"""
Autogenerated return type of ClientUpdate
"""
type ClientUpdatePayload {
  client: Client!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ParsableError!]!
}

"""
Autogenerated input type of CreateUserMutation
"""
input CreateUserMutationInput {
  accountType: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of CreateUserMutation
"""
type CreateUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
  user: User!
}

type Credential {
  id: ID!
  imageUrl: String!
  level: String!
  location: String!
  major: String!
  scope: String!
  verified: Boolean!
  year: Int!
}

"""
Autogenerated input type of DeleteUserMutation
"""
input DeleteUserMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteUserMutation
"""
type DeleteUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Insurance {
  country: String!
  id: ID!
  name: String!
  state: String
}

type Language {
  id: ID!
  name: String!
}

type Modality {
  id: ID!
  name: String!
}

type Mutation {
  clientDelete(
    """
    Parameters for ClientDelete
    """
    input: ClientDeleteInput!
  ): ClientDeletePayload
  clientUpdate(
    """
    Parameters for ClientUpdate
    """
    input: ClientUpdateInput!
  ): ClientUpdatePayload
  createUser(
    """
    Parameters for CreateUserMutation
    """
    input: CreateUserMutationInput!
  ): CreateUserMutationPayload
  deleteUser(
    """
    Parameters for DeleteUserMutation
    """
    input: DeleteUserMutationInput!
  ): DeleteUserMutationPayload
  postCreate(
    """
    Parameters for PostCreate
    """
    input: PostCreateInput!
  ): PostCreatePayload
  postDelete(
    """
    Parameters for PostDelete
    """
    input: PostDeleteInput!
  ): PostDeletePayload
  postUpdate(
    """
    Parameters for PostUpdate
    """
    input: PostUpdateInput!
  ): PostUpdatePayload
  proposalCreate(
    """
    Parameters for ProposalCreate
    """
    input: ProposalCreateInput!
  ): ProposalCreatePayload
  proposalDelete(
    """
    Parameters for ProposalDelete
    """
    input: ProposalDeleteInput!
  ): ProposalDeletePayload
  proposalUpdate(
    """
    Parameters for ProposalUpdate
    """
    input: ProposalUpdateInput!
  ): ProposalUpdatePayload
  signInUser(
    """
    Parameters for SignInUserMutation
    """
    input: SignInUserMutationInput!
  ): SignInUserMutationPayload
  therapistDelete(
    """
    Parameters for TherapistDelete
    """
    input: TherapistDeleteInput!
  ): TherapistDeletePayload
  therapistUpdate(
    """
    Parameters for TherapistUpdate
    """
    input: TherapistUpdateInput!
  ): TherapistUpdatePayload
  updateUser(
    """
    Parameters for UpdateUserMutation
    """
    input: UpdateUserMutationInput!
  ): UpdateUserMutationPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
A user-readable error
"""
type ParsableError {
  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}

type PaymentMethod {
  icon: String
  id: ID!
  name: Int!
}

type PaymentOption {
  category: String!
  id: ID!
  maxRate: Int!
  minRate: Int!
  paymentMethods: [PaymentMethod!]!
  slidingScale: Boolean!
}

type Post {
  acquiredHere: Boolean
  active: Boolean
  anonymizationDate: ISO8601Date
  anonymize: Boolean
  client: Client!
  createdAt: ISO8601DateTime!
  environment: String
  expectations: String
  furtherInfo: String
  id: ID!
  isInsured: Boolean
  maxBudget: Int
  minBudget: Int
  myProposal: Proposal
  onMeds: Boolean
  outOfPocketOnly: Boolean
  problems: String
  proposalCount: Int!
  proposals: [Proposal!]!
  seenTherapist: Boolean
  specializedIssues: [SpecializedIssue!]!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Post.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]

  """
  A list of nodes.
  """
  nodes: [Post]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Autogenerated input type of PostCreate
"""
input PostCreateInput {
  anonymizationDate: String
  anonymize: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  environment: String!
  expectations: String!
  furtherInfo: String!
  insuranceId: Int
  isInsured: Boolean!
  maxBudget: Int!
  minBudget: Int!
  outOfPocketOnly: Boolean!
  problems: String!
}

"""
Autogenerated return type of PostCreate
"""
type PostCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ParsableError!]!
  post: Post
}

"""
Autogenerated input type of PostDelete
"""
input PostDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: Int!
}

"""
Autogenerated return type of PostDelete
"""
type PostDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  post: Post
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Post
}

type PostProposals {
  postProposalsConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    postId: Int!
  ): ProposalConnection!
}

"""
Autogenerated input type of PostUpdate
"""
input PostUpdateInput {
  anonymizationDate: String
  anonymize: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  environment: String!
  expectations: String!
  furtherInfo: String!
  insuranceId: Int
  isInsured: Boolean!
  maxBudget: Int!
  minBudget: Int!
  outOfPocketOnly: Boolean!
  postId: Int!
  problems: String!
}

"""
Autogenerated return type of PostUpdate
"""
type PostUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ParsableError!]!
  post: Post!
}

type Proposal {
  createdAt: ISO8601DateTime!
  id: ID!
  message: String
  post: Post!
  status: String
  therapist: Therapist!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Proposal.
"""
type ProposalConnection {
  """
  A list of edges.
  """
  edges: [ProposalEdge]

  """
  A list of nodes.
  """
  nodes: [Proposal]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Autogenerated input type of ProposalCreate
"""
input ProposalCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String!
  postId: Int!
}

"""
Autogenerated return type of ProposalCreate
"""
type ProposalCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ParsableError!]!
  proposal: Proposal
}

"""
Autogenerated input type of ProposalDelete
"""
input ProposalDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: Int!
}

"""
Autogenerated return type of ProposalDelete
"""
type ProposalDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  proposal: Proposal!
}

"""
An edge in a connection.
"""
type ProposalEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Proposal
}

"""
Autogenerated input type of ProposalUpdate
"""
input ProposalUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String!
  proposalId: Int!
}

"""
Autogenerated return type of ProposalUpdate
"""
type ProposalUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ParsableError!]!
  proposal: Proposal!
}

type Query {
  asClient: AsClient
  asTherapist: AsTherapist
  client: Client
  post(id: Int!): Post

  """
  Returns a paginated powered list of proposals tied to a post
  """
  postProposals: PostProposals
  proposal(id: Int!): Proposal
  therapist(id: Int!): Therapist

  """
  Returns a paginated powered list of therapists
  """
  therapists: Therapists
  user: User
}

"""
Autogenerated input type of SignInUserMutation
"""
input SignInUserMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of SignInUserMutation
"""
type SignInUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String
  user: User
}

type SpecializedIssue {
  id: ID!
  name: String!
}

type Subscription {
  """
  A user has been updated
  """
  userUpdated: User!
}

type Therapist {
  age: Int
  country: String
  createdAt: ISO8601DateTime!
  credentials: [Credential!]!
  description: String
  environments: [String!]!
  firstName: String
  id: ID!
  insurances: [Insurance!]!
  languages: [Language!]!
  lastName: String
  modalities: [Modality!]!
  onboardingStep: Int
  paymentOptions: [PaymentOption!]!
  phone: String
  profileImageUrl: String
  pronouns: String
  proposalCount: Int!
  proposals: [Proposal!]!
  specializedIssues: [SpecializedIssue!]!
  therapyProcess: String
  topics: String
  unverifiedCredentials: [Credential!]!
  updatedAt: ISO8601DateTime!
  websiteUrl: String
}

"""
The connection type for Therapist.
"""
type TherapistConnection {
  """
  A list of edges.
  """
  edges: [TherapistEdge]

  """
  A list of nodes.
  """
  nodes: [Therapist]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Autogenerated input type of TherapistDelete
"""
input TherapistDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of TherapistDelete
"""
type TherapistDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  therapist: Therapist!
}

"""
An edge in a connection.
"""
type TherapistEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Therapist
}

"""
Autogenerated input type of TherapistUpdate
"""
input TherapistUpdateInput {
  birthdate: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String!
  description: String!
  environment: String!
  firstName: String!
  gender: String!
  languages: String!
  lastName: String!
  phone: String!
  profileImg: String!
  pronouns: String!
  showAge: Boolean!
  therapyProcess: String!
  topics: String!
}

"""
Autogenerated return type of TherapistUpdate
"""
type TherapistUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ParsableError!]!
  therapist: Therapist!
}

type Therapists {
  therapistsConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TherapistConnection!
}

"""
Autogenerated input type of UpdateUserMutation
"""
input UpdateUserMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String
  password: String
}

"""
Autogenerated return type of UpdateUserMutation
"""
type UpdateUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type User {
  email: String!
  id: ID!
}
