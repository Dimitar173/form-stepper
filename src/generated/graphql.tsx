import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type AsClient = {
  __typename?: 'AsClient';
  posts: PostConnection;
  proposals: ProposalConnection;
};


export type AsClientPostsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type AsClientProposalsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type AsTherapist = {
  __typename?: 'AsTherapist';
  allPosts: PostConnection;
  proposals: ProposalConnection;
};


export type AsTherapistAllPostsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type AsTherapistProposalsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type Client = {
  __typename?: 'Client';
  age: Scalars['String'];
  city?: Maybe<Scalars['String']>;
  cityState?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  languages: Array<Language>;
  onboardingStep?: Maybe<Scalars['Int']>;
  posts: Array<Post>;
  state?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
  userId: Scalars['Int'];
};

/** Autogenerated input type of ClientDelete */
export type ClientDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ClientDelete */
export type ClientDeletePayload = {
  __typename?: 'ClientDeletePayload';
  client: Client;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ClientUpdate */
export type ClientUpdateInput = {
  birthdate: Scalars['String'];
  city: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  country: Scalars['String'];
  state: Scalars['String'];
};

/** Autogenerated return type of ClientUpdate */
export type ClientUpdatePayload = {
  __typename?: 'ClientUpdatePayload';
  client: Client;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ParsableError>;
};

/** Autogenerated input type of CreateUserMutation */
export type CreateUserMutationInput = {
  accountType: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of CreateUserMutation */
export type CreateUserMutationPayload = {
  __typename?: 'CreateUserMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  token: Scalars['String'];
  user: User;
};

export type Credential = {
  __typename?: 'Credential';
  id: Scalars['ID'];
  imageUrl: Scalars['String'];
  level: Scalars['String'];
  location: Scalars['String'];
  major: Scalars['String'];
  scope: Scalars['String'];
  verified: Scalars['Boolean'];
  year: Scalars['Int'];
};

/** Autogenerated input type of DeleteUserMutation */
export type DeleteUserMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteUserMutation */
export type DeleteUserMutationPayload = {
  __typename?: 'DeleteUserMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export type Insurance = {
  __typename?: 'Insurance';
  country: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  state?: Maybe<Scalars['String']>;
};

export type Language = {
  __typename?: 'Language';
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type Modality = {
  __typename?: 'Modality';
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  clientDelete?: Maybe<ClientDeletePayload>;
  clientUpdate?: Maybe<ClientUpdatePayload>;
  createUser?: Maybe<CreateUserMutationPayload>;
  deleteUser?: Maybe<DeleteUserMutationPayload>;
  postCreate?: Maybe<PostCreatePayload>;
  postDelete?: Maybe<PostDeletePayload>;
  postUpdate?: Maybe<PostUpdatePayload>;
  proposalCreate?: Maybe<ProposalCreatePayload>;
  proposalDelete?: Maybe<ProposalDeletePayload>;
  proposalUpdate?: Maybe<ProposalUpdatePayload>;
  signInUser?: Maybe<SignInUserMutationPayload>;
  therapistDelete?: Maybe<TherapistDeletePayload>;
  therapistUpdate?: Maybe<TherapistUpdatePayload>;
  updateUser?: Maybe<UpdateUserMutationPayload>;
};


export type MutationClientDeleteArgs = {
  input: ClientDeleteInput;
};


export type MutationClientUpdateArgs = {
  input: ClientUpdateInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserMutationInput;
};


export type MutationDeleteUserArgs = {
  input: DeleteUserMutationInput;
};


export type MutationPostCreateArgs = {
  input: PostCreateInput;
};


export type MutationPostDeleteArgs = {
  input: PostDeleteInput;
};


export type MutationPostUpdateArgs = {
  input: PostUpdateInput;
};


export type MutationProposalCreateArgs = {
  input: ProposalCreateInput;
};


export type MutationProposalDeleteArgs = {
  input: ProposalDeleteInput;
};


export type MutationProposalUpdateArgs = {
  input: ProposalUpdateInput;
};


export type MutationSignInUserArgs = {
  input: SignInUserMutationInput;
};


export type MutationTherapistDeleteArgs = {
  input: TherapistDeleteInput;
};


export type MutationTherapistUpdateArgs = {
  input: TherapistUpdateInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserMutationInput;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** A user-readable error */
export type ParsableError = {
  __typename?: 'ParsableError';
  /** A description of the error */
  message: Scalars['String'];
  /** Which input value this error came from */
  path?: Maybe<Array<Scalars['String']>>;
};

export type PaymentMethod = {
  __typename?: 'PaymentMethod';
  icon?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['Int'];
};

export type PaymentOption = {
  __typename?: 'PaymentOption';
  category: Scalars['String'];
  id: Scalars['ID'];
  maxRate: Scalars['Int'];
  minRate: Scalars['Int'];
  paymentMethods: Array<PaymentMethod>;
  slidingScale: Scalars['Boolean'];
};

export type Post = {
  __typename?: 'Post';
  acquiredHere?: Maybe<Scalars['Boolean']>;
  active?: Maybe<Scalars['Boolean']>;
  anonymizationDate?: Maybe<Scalars['ISO8601Date']>;
  anonymize?: Maybe<Scalars['Boolean']>;
  client: Client;
  createdAt: Scalars['ISO8601DateTime'];
  environment?: Maybe<Scalars['String']>;
  expectations?: Maybe<Scalars['String']>;
  furtherInfo?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  isInsured?: Maybe<Scalars['Boolean']>;
  maxBudget?: Maybe<Scalars['Int']>;
  minBudget?: Maybe<Scalars['Int']>;
  myProposal?: Maybe<Proposal>;
  onMeds?: Maybe<Scalars['Boolean']>;
  outOfPocketOnly?: Maybe<Scalars['Boolean']>;
  problems?: Maybe<Scalars['String']>;
  proposalCount: Scalars['Int'];
  proposals: Array<Proposal>;
  seenTherapist?: Maybe<Scalars['Boolean']>;
  specializedIssues: Array<SpecializedIssue>;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for Post. */
export type PostConnection = {
  __typename?: 'PostConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PostEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Post>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** Autogenerated input type of PostCreate */
export type PostCreateInput = {
  anonymizationDate?: Maybe<Scalars['String']>;
  anonymize?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  environment: Scalars['String'];
  expectations: Scalars['String'];
  furtherInfo: Scalars['String'];
  insuranceId?: Maybe<Scalars['Int']>;
  isInsured: Scalars['Boolean'];
  maxBudget: Scalars['Int'];
  minBudget: Scalars['Int'];
  outOfPocketOnly: Scalars['Boolean'];
  problems: Scalars['String'];
};

/** Autogenerated return type of PostCreate */
export type PostCreatePayload = {
  __typename?: 'PostCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ParsableError>;
  post?: Maybe<Post>;
};

/** Autogenerated input type of PostDelete */
export type PostDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** Autogenerated return type of PostDelete */
export type PostDeletePayload = {
  __typename?: 'PostDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  post?: Maybe<Post>;
};

/** An edge in a connection. */
export type PostEdge = {
  __typename?: 'PostEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Post>;
};

export type PostProposals = {
  __typename?: 'PostProposals';
  postProposalsConnection: ProposalConnection;
};


export type PostProposalsPostProposalsConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  postId: Scalars['Int'];
};

/** Autogenerated input type of PostUpdate */
export type PostUpdateInput = {
  anonymizationDate?: Maybe<Scalars['String']>;
  anonymize?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  environment: Scalars['String'];
  expectations: Scalars['String'];
  furtherInfo: Scalars['String'];
  insuranceId?: Maybe<Scalars['Int']>;
  isInsured: Scalars['Boolean'];
  maxBudget: Scalars['Int'];
  minBudget: Scalars['Int'];
  outOfPocketOnly: Scalars['Boolean'];
  postId: Scalars['Int'];
  problems: Scalars['String'];
};

/** Autogenerated return type of PostUpdate */
export type PostUpdatePayload = {
  __typename?: 'PostUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ParsableError>;
  post: Post;
};

export type Proposal = {
  __typename?: 'Proposal';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  message?: Maybe<Scalars['String']>;
  post: Post;
  status?: Maybe<Scalars['String']>;
  therapist: Therapist;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for Proposal. */
export type ProposalConnection = {
  __typename?: 'ProposalConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProposalEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Proposal>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** Autogenerated input type of ProposalCreate */
export type ProposalCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  postId: Scalars['Int'];
};

/** Autogenerated return type of ProposalCreate */
export type ProposalCreatePayload = {
  __typename?: 'ProposalCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ParsableError>;
  proposal?: Maybe<Proposal>;
};

/** Autogenerated input type of ProposalDelete */
export type ProposalDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** Autogenerated return type of ProposalDelete */
export type ProposalDeletePayload = {
  __typename?: 'ProposalDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  proposal: Proposal;
};

/** An edge in a connection. */
export type ProposalEdge = {
  __typename?: 'ProposalEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Proposal>;
};

/** Autogenerated input type of ProposalUpdate */
export type ProposalUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  proposalId: Scalars['Int'];
};

/** Autogenerated return type of ProposalUpdate */
export type ProposalUpdatePayload = {
  __typename?: 'ProposalUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ParsableError>;
  proposal: Proposal;
};

export type Query = {
  __typename?: 'Query';
  asClient?: Maybe<AsClient>;
  asTherapist?: Maybe<AsTherapist>;
  client?: Maybe<Client>;
  post?: Maybe<Post>;
  /** Returns a paginated powered list of proposals tied to a post */
  postProposals?: Maybe<PostProposals>;
  proposal?: Maybe<Proposal>;
  therapist?: Maybe<Therapist>;
  /** Returns a paginated powered list of therapists */
  therapists?: Maybe<Therapists>;
  user?: Maybe<User>;
};


export type QueryPostArgs = {
  id: Scalars['Int'];
};


export type QueryProposalArgs = {
  id: Scalars['Int'];
};


export type QueryTherapistArgs = {
  id: Scalars['Int'];
};

/** Autogenerated input type of SignInUserMutation */
export type SignInUserMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of SignInUserMutation */
export type SignInUserMutationPayload = {
  __typename?: 'SignInUserMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

export type SpecializedIssue = {
  __typename?: 'SpecializedIssue';
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type Subscription = {
  __typename?: 'Subscription';
  /** A user has been updated */
  userUpdated: User;
};

export type Therapist = {
  __typename?: 'Therapist';
  age?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  credentials: Array<Credential>;
  description?: Maybe<Scalars['String']>;
  environments: Array<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  insurances: Array<Insurance>;
  languages: Array<Language>;
  lastName?: Maybe<Scalars['String']>;
  modalities: Array<Modality>;
  onboardingStep?: Maybe<Scalars['Int']>;
  paymentOptions: Array<PaymentOption>;
  phone?: Maybe<Scalars['String']>;
  profileImageUrl?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  proposalCount: Scalars['Int'];
  proposals: Array<Proposal>;
  specializedIssues: Array<SpecializedIssue>;
  therapyProcess?: Maybe<Scalars['String']>;
  topics?: Maybe<Scalars['String']>;
  unverifiedCredentials: Array<Credential>;
  updatedAt: Scalars['ISO8601DateTime'];
  websiteUrl?: Maybe<Scalars['String']>;
};

/** The connection type for Therapist. */
export type TherapistConnection = {
  __typename?: 'TherapistConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TherapistEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Therapist>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** Autogenerated input type of TherapistDelete */
export type TherapistDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of TherapistDelete */
export type TherapistDeletePayload = {
  __typename?: 'TherapistDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  therapist: Therapist;
};

/** An edge in a connection. */
export type TherapistEdge = {
  __typename?: 'TherapistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Therapist>;
};

/** Autogenerated input type of TherapistUpdate */
export type TherapistUpdateInput = {
  birthdate: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  country: Scalars['String'];
  description: Scalars['String'];
  environment: Scalars['String'];
  firstName: Scalars['String'];
  gender: Scalars['String'];
  languages: Scalars['String'];
  lastName: Scalars['String'];
  phone: Scalars['String'];
  profileImg: Scalars['String'];
  pronouns: Scalars['String'];
  showAge: Scalars['Boolean'];
  therapyProcess: Scalars['String'];
  topics: Scalars['String'];
};

/** Autogenerated return type of TherapistUpdate */
export type TherapistUpdatePayload = {
  __typename?: 'TherapistUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ParsableError>;
  therapist: Therapist;
};

export type Therapists = {
  __typename?: 'Therapists';
  therapistsConnection: TherapistConnection;
};


export type TherapistsTherapistsConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of UpdateUserMutation */
export type UpdateUserMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateUserMutation */
export type UpdateUserMutationPayload = {
  __typename?: 'UpdateUserMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export type User = {
  __typename?: 'User';
  email: Scalars['String'];
  id: Scalars['ID'];
};

export type UpdateClientMutationVariables = Exact<{
  input: ClientUpdateInput;
}>;


export type UpdateClientMutation = { __typename?: 'Mutation', clientUpdate?: { __typename?: 'ClientUpdatePayload', client: { __typename?: 'Client', id: string } } | null | undefined };

export type UpdatePostMutationVariables = Exact<{
  postUpdateInput: PostUpdateInput;
}>;


export type UpdatePostMutation = { __typename?: 'Mutation', postUpdate?: { __typename?: 'PostUpdatePayload', post: { __typename?: 'Post', id: string } } | null | undefined };

export type CreatePostMutationVariables = Exact<{
  postCreateInput: PostCreateInput;
}>;


export type CreatePostMutation = { __typename?: 'Mutation', postCreate?: { __typename?: 'PostCreatePayload', post?: { __typename?: 'Post', id: string } | null | undefined } | null | undefined };

export type DeletePostMutationVariables = Exact<{
  postDeleteInput: PostDeleteInput;
}>;


export type DeletePostMutation = { __typename?: 'Mutation', postDelete?: { __typename?: 'PostDeletePayload', post?: { __typename?: 'Post', id: string } | null | undefined } | null | undefined };

export type CreateProposalMutationVariables = Exact<{
  input: ProposalCreateInput;
}>;


export type CreateProposalMutation = { __typename?: 'Mutation', proposalCreate?: { __typename?: 'ProposalCreatePayload', proposal?: { __typename?: 'Proposal', id: string } | null | undefined } | null | undefined };

export type UpdateProposalMutationVariables = Exact<{
  input: ProposalUpdateInput;
}>;


export type UpdateProposalMutation = { __typename?: 'Mutation', proposalUpdate?: { __typename?: 'ProposalUpdatePayload', proposal: { __typename?: 'Proposal', id: string } } | null | undefined };

export type DeleteProposalMutationVariables = Exact<{
  input: ProposalDeleteInput;
}>;


export type DeleteProposalMutation = { __typename?: 'Mutation', proposalDelete?: { __typename?: 'ProposalDeletePayload', proposal: { __typename?: 'Proposal', id: string } } | null | undefined };

export type UpdateTherapistMutationVariables = Exact<{
  input: TherapistUpdateInput;
}>;


export type UpdateTherapistMutation = { __typename?: 'Mutation', therapistUpdate?: { __typename?: 'TherapistUpdatePayload', therapist: { __typename?: 'Therapist', id: string } } | null | undefined };

export type DeleteTherapistMutationVariables = Exact<{
  input: TherapistDeleteInput;
}>;


export type DeleteTherapistMutation = { __typename?: 'Mutation', therapistDelete?: { __typename?: 'TherapistDeletePayload', therapist: { __typename?: 'Therapist', id: string } } | null | undefined };

export type CreateUserMutationVariables = Exact<{
  input: CreateUserMutationInput;
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'CreateUserMutationPayload', token: string } | null | undefined };

export type SignInUserMutationVariables = Exact<{
  input: SignInUserMutationInput;
}>;


export type SignInUserMutation = { __typename?: 'Mutation', signInUser?: { __typename?: 'SignInUserMutationPayload', token?: string | null | undefined } | null | undefined };

export type DeleteUserMutationVariables = Exact<{
  input: DeleteUserMutationInput;
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', deleteUser?: { __typename?: 'DeleteUserMutationPayload', user: { __typename?: 'User', id: string } } | null | undefined };

export type ShowClientQueryVariables = Exact<{ [key: string]: never; }>;


export type ShowClientQuery = { __typename?: 'Query', client?: { __typename?: 'Client', id: string } | null | undefined };

export type MyPostsQueryVariables = Exact<{
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
}>;


export type MyPostsQuery = { __typename?: 'Query', asClient?: { __typename?: 'AsClient', posts: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean }, edges?: Array<{ __typename?: 'PostEdge', cursor: string, node?: { __typename?: 'Post', id: string, createdAt: any, problems?: string | null | undefined, environment?: string | null | undefined, specializedIssues: Array<{ __typename?: 'SpecializedIssue', name: string }>, client: { __typename?: 'Client', age: string, city?: string | null | undefined, state?: string | null | undefined, country?: string | null | undefined, languages: Array<{ __typename?: 'Language', name: string }> } } | null | undefined } | null | undefined> | null | undefined } } | null | undefined };

export type AllPostsQueryVariables = Exact<{
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
}>;


export type AllPostsQuery = { __typename?: 'Query', asTherapist?: { __typename?: 'AsTherapist', allPosts: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean }, edges?: Array<{ __typename?: 'PostEdge', cursor: string, node?: { __typename?: 'Post', id: string, createdAt: any, problems?: string | null | undefined, environment?: string | null | undefined, specializedIssues: Array<{ __typename?: 'SpecializedIssue', name: string }>, client: { __typename?: 'Client', age: string, city?: string | null | undefined, state?: string | null | undefined, country?: string | null | undefined, languages: Array<{ __typename?: 'Language', name: string }> } } | null | undefined } | null | undefined> | null | undefined } } | null | undefined };

export type PostQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type PostQuery = { __typename?: 'Query', post?: { __typename?: 'Post', id: string, problems?: string | null | undefined, expectations?: string | null | undefined, createdAt: any, environment?: string | null | undefined, onMeds?: boolean | null | undefined, seenTherapist?: boolean | null | undefined, proposalCount: number, specializedIssues: Array<{ __typename?: 'SpecializedIssue', name: string }>, client: { __typename?: 'Client', id: string, age: string, city?: string | null | undefined, state?: string | null | undefined, country?: string | null | undefined, languages: Array<{ __typename?: 'Language', name: string }> }, proposals: Array<{ __typename?: 'Proposal', message?: string | null | undefined }>, myProposal?: { __typename?: 'Proposal', id: string } | null | undefined } | null | undefined };

export type PostProposalsQueryVariables = Exact<{
  postId: Scalars['Int'];
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
}>;


export type PostProposalsQuery = { __typename?: 'Query', postProposals?: { __typename?: 'PostProposals', postProposalsConnection: { __typename?: 'ProposalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean }, edges?: Array<{ __typename?: 'ProposalEdge', cursor: string, node?: { __typename?: 'Proposal', id: string, status?: string | null | undefined, message?: string | null | undefined, therapist: { __typename?: 'Therapist', id: string, firstName?: string | null | undefined, lastName?: string | null | undefined, profileImageUrl?: string | null | undefined, age?: number | null | undefined } } | null | undefined } | null | undefined> | null | undefined } } | null | undefined };

export type SentProposalsQueryVariables = Exact<{
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
}>;


export type SentProposalsQuery = { __typename?: 'Query', asTherapist?: { __typename?: 'AsTherapist', proposals: { __typename?: 'ProposalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean }, edges?: Array<{ __typename?: 'ProposalEdge', cursor: string, node?: { __typename?: 'Proposal', id: string } | null | undefined } | null | undefined> | null | undefined } } | null | undefined };

export type ReceivedProposalsQueryVariables = Exact<{
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
}>;


export type ReceivedProposalsQuery = { __typename?: 'Query', asClient?: { __typename?: 'AsClient', proposals: { __typename?: 'ProposalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean }, edges?: Array<{ __typename?: 'ProposalEdge', cursor: string, node?: { __typename?: 'Proposal', id: string } | null | undefined } | null | undefined> | null | undefined } } | null | undefined };

export type ProposalQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type ProposalQuery = { __typename?: 'Query', proposal?: { __typename?: 'Proposal', id: string, message?: string | null | undefined, post: { __typename?: 'Post', id: string, createdAt: any, environment?: string | null | undefined, specializedIssues: Array<{ __typename?: 'SpecializedIssue', name: string }>, client: { __typename?: 'Client', city?: string | null | undefined, state?: string | null | undefined, age: string, languages: Array<{ __typename?: 'Language', name: string }> } } } | null | undefined };

export type TherapistsQueryVariables = Exact<{
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
}>;


export type TherapistsQuery = { __typename?: 'Query', therapists?: { __typename?: 'Therapists', therapistsConnection: { __typename?: 'TherapistConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean }, edges?: Array<{ __typename?: 'TherapistEdge', cursor: string, node?: { __typename?: 'Therapist', id: string } | null | undefined } | null | undefined> | null | undefined } } | null | undefined };

export type TherapistQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type TherapistQuery = { __typename?: 'Query', therapist?: { __typename?: 'Therapist', country?: string | null | undefined, createdAt: any, description?: string | null | undefined, firstName?: string | null | undefined, id: string, lastName?: string | null | undefined, profileImageUrl?: string | null | undefined, environments: Array<string>, therapyProcess?: string | null | undefined, websiteUrl?: string | null | undefined, languages: Array<{ __typename?: 'Language', name: string }>, modalities: Array<{ __typename?: 'Modality', name: string }>, insurances: Array<{ __typename?: 'Insurance', name: string, state?: string | null | undefined, country: string }>, paymentOptions: Array<{ __typename?: 'PaymentOption', minRate: number, maxRate: number, slidingScale: boolean }>, credentials: Array<{ __typename?: 'Credential', id: string, year: number, level: string, location: string, major: string, scope: string, verified: boolean }>, specializedIssues: Array<{ __typename?: 'SpecializedIssue', name: string }> } | null | undefined };

export type TestQueryVariables = Exact<{ [key: string]: never; }>;


export type TestQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string } | null | undefined };


export const UpdateClientDocument = gql`
    mutation UpdateClient($input: ClientUpdateInput!) {
  clientUpdate(input: $input) {
    client {
      id
    }
  }
}
    `;

export function useUpdateClientMutation() {
  return Urql.useMutation<UpdateClientMutation, UpdateClientMutationVariables>(UpdateClientDocument);
};
export const UpdatePostDocument = gql`
    mutation UpdatePost($postUpdateInput: PostUpdateInput!) {
  postUpdate(input: $postUpdateInput) {
    post {
      id
    }
  }
}
    `;

export function useUpdatePostMutation() {
  return Urql.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(UpdatePostDocument);
};
export const CreatePostDocument = gql`
    mutation CreatePost($postCreateInput: PostCreateInput!) {
  postCreate(input: $postCreateInput) {
    post {
      id
    }
  }
}
    `;

export function useCreatePostMutation() {
  return Urql.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument);
};
export const DeletePostDocument = gql`
    mutation deletePost($postDeleteInput: PostDeleteInput!) {
  postDelete(input: $postDeleteInput) {
    post {
      id
    }
  }
}
    `;

export function useDeletePostMutation() {
  return Urql.useMutation<DeletePostMutation, DeletePostMutationVariables>(DeletePostDocument);
};
export const CreateProposalDocument = gql`
    mutation CreateProposal($input: ProposalCreateInput!) {
  proposalCreate(input: $input) {
    proposal {
      id
    }
  }
}
    `;

export function useCreateProposalMutation() {
  return Urql.useMutation<CreateProposalMutation, CreateProposalMutationVariables>(CreateProposalDocument);
};
export const UpdateProposalDocument = gql`
    mutation UpdateProposal($input: ProposalUpdateInput!) {
  proposalUpdate(input: $input) {
    proposal {
      id
    }
  }
}
    `;

export function useUpdateProposalMutation() {
  return Urql.useMutation<UpdateProposalMutation, UpdateProposalMutationVariables>(UpdateProposalDocument);
};
export const DeleteProposalDocument = gql`
    mutation DeleteProposal($input: ProposalDeleteInput!) {
  proposalDelete(input: $input) {
    proposal {
      id
    }
  }
}
    `;

export function useDeleteProposalMutation() {
  return Urql.useMutation<DeleteProposalMutation, DeleteProposalMutationVariables>(DeleteProposalDocument);
};
export const UpdateTherapistDocument = gql`
    mutation UpdateTherapist($input: TherapistUpdateInput!) {
  therapistUpdate(input: $input) {
    therapist {
      id
    }
  }
}
    `;

export function useUpdateTherapistMutation() {
  return Urql.useMutation<UpdateTherapistMutation, UpdateTherapistMutationVariables>(UpdateTherapistDocument);
};
export const DeleteTherapistDocument = gql`
    mutation DeleteTherapist($input: TherapistDeleteInput!) {
  therapistDelete(input: $input) {
    therapist {
      id
    }
  }
}
    `;

export function useDeleteTherapistMutation() {
  return Urql.useMutation<DeleteTherapistMutation, DeleteTherapistMutationVariables>(DeleteTherapistDocument);
};
export const CreateUserDocument = gql`
    mutation CreateUser($input: CreateUserMutationInput!) {
  createUser(input: $input) {
    token
  }
}
    `;

export function useCreateUserMutation() {
  return Urql.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument);
};
export const SignInUserDocument = gql`
    mutation SignInUser($input: SignInUserMutationInput!) {
  signInUser(input: $input) {
    token
  }
}
    `;

export function useSignInUserMutation() {
  return Urql.useMutation<SignInUserMutation, SignInUserMutationVariables>(SignInUserDocument);
};
export const DeleteUserDocument = gql`
    mutation DeleteUser($input: DeleteUserMutationInput!) {
  deleteUser(input: $input) {
    user {
      id
    }
  }
}
    `;

export function useDeleteUserMutation() {
  return Urql.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument);
};
export const ShowClientDocument = gql`
    query ShowClient {
  client {
    id
  }
}
    `;

export function useShowClientQuery(options: Omit<Urql.UseQueryArgs<ShowClientQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<ShowClientQuery>({ query: ShowClientDocument, ...options });
};
export const MyPostsDocument = gql`
    query MyPosts($first: Int, $after: String, $before: String) {
  asClient {
    posts(first: $first, after: $after, before: $before) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          id
          createdAt
          specializedIssues {
            name
          }
          problems
          environment
          client {
            age
            city
            state
            country
            languages {
              name
            }
          }
        }
      }
    }
  }
}
    `;

export function useMyPostsQuery(options: Omit<Urql.UseQueryArgs<MyPostsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<MyPostsQuery>({ query: MyPostsDocument, ...options });
};
export const AllPostsDocument = gql`
    query AllPosts($first: Int, $after: String, $before: String) {
  asTherapist {
    allPosts(first: $first, after: $after, before: $before) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          id
          createdAt
          specializedIssues {
            name
          }
          problems
          environment
          client {
            age
            city
            state
            country
            languages {
              name
            }
          }
        }
      }
    }
  }
}
    `;

export function useAllPostsQuery(options: Omit<Urql.UseQueryArgs<AllPostsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<AllPostsQuery>({ query: AllPostsDocument, ...options });
};
export const PostDocument = gql`
    query Post($id: Int!) {
  post(id: $id) {
    id
    problems
    expectations
    createdAt
    environment
    onMeds
    seenTherapist
    specializedIssues {
      name
    }
    client {
      id
      languages {
        name
      }
      age
      city
      state
      country
    }
    proposals {
      message
    }
    proposalCount
    myProposal {
      id
    }
  }
}
    `;

export function usePostQuery(options: Omit<Urql.UseQueryArgs<PostQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<PostQuery>({ query: PostDocument, ...options });
};
export const PostProposalsDocument = gql`
    query PostProposals($postId: Int!, $first: Int, $after: String, $before: String) {
  postProposals {
    postProposalsConnection(
      postId: $postId
      first: $first
      after: $after
      before: $before
    ) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          id
          status
          message
          therapist {
            id
            firstName
            lastName
            profileImageUrl
            age
          }
        }
      }
    }
  }
}
    `;

export function usePostProposalsQuery(options: Omit<Urql.UseQueryArgs<PostProposalsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<PostProposalsQuery>({ query: PostProposalsDocument, ...options });
};
export const SentProposalsDocument = gql`
    query SentProposals($first: Int, $after: String, $before: String) {
  asTherapist {
    proposals(first: $first, after: $after, before: $before) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          id
        }
      }
    }
  }
}
    `;

export function useSentProposalsQuery(options: Omit<Urql.UseQueryArgs<SentProposalsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<SentProposalsQuery>({ query: SentProposalsDocument, ...options });
};
export const ReceivedProposalsDocument = gql`
    query ReceivedProposals($first: Int, $after: String, $before: String) {
  asClient {
    proposals(first: $first, after: $after, before: $before) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          id
        }
      }
    }
  }
}
    `;

export function useReceivedProposalsQuery(options: Omit<Urql.UseQueryArgs<ReceivedProposalsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<ReceivedProposalsQuery>({ query: ReceivedProposalsDocument, ...options });
};
export const ProposalDocument = gql`
    query Proposal($id: Int!) {
  proposal(id: $id) {
    id
    message
    post {
      id
      createdAt
      environment
      specializedIssues {
        name
      }
      client {
        city
        state
        age
        languages {
          name
        }
      }
    }
  }
}
    `;

export function useProposalQuery(options: Omit<Urql.UseQueryArgs<ProposalQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<ProposalQuery>({ query: ProposalDocument, ...options });
};
export const TherapistsDocument = gql`
    query Therapists($first: Int, $after: String, $before: String) {
  therapists {
    therapistsConnection(first: $first, after: $after, before: $before) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          id
        }
      }
    }
  }
}
    `;

export function useTherapistsQuery(options: Omit<Urql.UseQueryArgs<TherapistsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<TherapistsQuery>({ query: TherapistsDocument, ...options });
};
export const TherapistDocument = gql`
    query Therapist($id: Int!) {
  therapist(id: $id) {
    country
    createdAt
    description
    firstName
    id
    languages {
      name
    }
    lastName
    modalities {
      name
    }
    insurances {
      name
      state
      country
    }
    paymentOptions {
      minRate
      maxRate
      slidingScale
    }
    credentials {
      id
      year
      level
      location
      major
      scope
      verified
    }
    specializedIssues {
      name
    }
    profileImageUrl
    environments
    therapyProcess
    websiteUrl
  }
}
    `;

export function useTherapistQuery(options: Omit<Urql.UseQueryArgs<TherapistQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<TherapistQuery>({ query: TherapistDocument, ...options });
};
export const TestDocument = gql`
    query test {
  user {
    id
  }
}
    `;

export function useTestQuery(options: Omit<Urql.UseQueryArgs<TestQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<TestQuery>({ query: TestDocument, ...options });
};
import { IntrospectionQuery } from 'graphql';
export default {
  "__schema": {
    "queryType": {
      "name": "Query"
    },
    "mutationType": {
      "name": "Mutation"
    },
    "subscriptionType": {
      "name": "Subscription"
    },
    "types": [
      {
        "kind": "OBJECT",
        "name": "AsClient",
        "fields": [
          {
            "name": "posts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PostConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "proposals",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ProposalConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AsTherapist",
        "fields": [
          {
            "name": "allPosts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PostConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "proposals",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ProposalConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Client",
        "fields": [
          {
            "name": "age",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "city",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "cityState",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "country",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "languages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Language",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "onboardingStep",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "posts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Post",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "state",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ClientDeletePayload",
        "fields": [
          {
            "name": "client",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Client",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ClientUpdatePayload",
        "fields": [
          {
            "name": "client",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Client",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "errors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ParsableError",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserMutationPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "token",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "User",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Credential",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "imageUrl",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "level",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "location",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "major",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "scope",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "verified",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "year",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserMutationPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "User",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Insurance",
        "fields": [
          {
            "name": "country",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "state",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Language",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Modality",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Mutation",
        "fields": [
          {
            "name": "clientDelete",
            "type": {
              "kind": "OBJECT",
              "name": "ClientDeletePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "clientUpdate",
            "type": {
              "kind": "OBJECT",
              "name": "ClientUpdatePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUser",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserMutationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUser",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserMutationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "postCreate",
            "type": {
              "kind": "OBJECT",
              "name": "PostCreatePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "postDelete",
            "type": {
              "kind": "OBJECT",
              "name": "PostDeletePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "postUpdate",
            "type": {
              "kind": "OBJECT",
              "name": "PostUpdatePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "proposalCreate",
            "type": {
              "kind": "OBJECT",
              "name": "ProposalCreatePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "proposalDelete",
            "type": {
              "kind": "OBJECT",
              "name": "ProposalDeletePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "proposalUpdate",
            "type": {
              "kind": "OBJECT",
              "name": "ProposalUpdatePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "signInUser",
            "type": {
              "kind": "OBJECT",
              "name": "SignInUserMutationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "therapistDelete",
            "type": {
              "kind": "OBJECT",
              "name": "TherapistDeletePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "therapistUpdate",
            "type": {
              "kind": "OBJECT",
              "name": "TherapistUpdatePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUser",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserMutationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PageInfo",
        "fields": [
          {
            "name": "endCursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "hasNextPage",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "hasPreviousPage",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "startCursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ParsableError",
        "fields": [
          {
            "name": "message",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "path",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PaymentMethod",
        "fields": [
          {
            "name": "icon",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PaymentOption",
        "fields": [
          {
            "name": "category",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "maxRate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "minRate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "paymentMethods",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PaymentMethod",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "slidingScale",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Post",
        "fields": [
          {
            "name": "acquiredHere",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "active",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "anonymizationDate",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "anonymize",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "client",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Client",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "environment",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "expectations",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "furtherInfo",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "isInsured",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "maxBudget",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "minBudget",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "myProposal",
            "type": {
              "kind": "OBJECT",
              "name": "Proposal",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "onMeds",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "outOfPocketOnly",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "problems",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "proposalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "proposals",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Proposal",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "seenTherapist",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "specializedIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SpecializedIssue",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PostConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "PostEdge",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PostCreatePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "errors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ParsableError",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "post",
            "type": {
              "kind": "OBJECT",
              "name": "Post",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PostDeletePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "post",
            "type": {
              "kind": "OBJECT",
              "name": "Post",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PostEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Post",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PostProposals",
        "fields": [
          {
            "name": "postProposalsConnection",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ProposalConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "postId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PostUpdatePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "errors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ParsableError",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "post",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Proposal",
        "fields": [
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "message",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "post",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "status",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "therapist",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Therapist",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ProposalConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "ProposalEdge",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "Proposal",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ProposalCreatePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "errors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ParsableError",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "proposal",
            "type": {
              "kind": "OBJECT",
              "name": "Proposal",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ProposalDeletePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "proposal",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Proposal",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ProposalEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Proposal",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ProposalUpdatePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "errors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ParsableError",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "proposal",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Proposal",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Query",
        "fields": [
          {
            "name": "asClient",
            "type": {
              "kind": "OBJECT",
              "name": "AsClient",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "asTherapist",
            "type": {
              "kind": "OBJECT",
              "name": "AsTherapist",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "client",
            "type": {
              "kind": "OBJECT",
              "name": "Client",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "post",
            "type": {
              "kind": "OBJECT",
              "name": "Post",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "postProposals",
            "type": {
              "kind": "OBJECT",
              "name": "PostProposals",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "proposal",
            "type": {
              "kind": "OBJECT",
              "name": "Proposal",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "therapist",
            "type": {
              "kind": "OBJECT",
              "name": "Therapist",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "therapists",
            "type": {
              "kind": "OBJECT",
              "name": "Therapists",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SignInUserMutationPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "token",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SpecializedIssue",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Subscription",
        "fields": [
          {
            "name": "userUpdated",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "User",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Therapist",
        "fields": [
          {
            "name": "age",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "country",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "credentials",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Credential",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "environments",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "firstName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "insurances",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Insurance",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "languages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Language",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "lastName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "modalities",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Modality",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "onboardingStep",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "paymentOptions",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PaymentOption",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "phone",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "profileImageUrl",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "pronouns",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "proposalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "proposals",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Proposal",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "specializedIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SpecializedIssue",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "therapyProcess",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "topics",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "unverifiedCredentials",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Credential",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "websiteUrl",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "TherapistConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "TherapistEdge",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "Therapist",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "TherapistDeletePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "therapist",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Therapist",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "TherapistEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Therapist",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "TherapistUpdatePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "errors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ParsableError",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "therapist",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Therapist",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Therapists",
        "fields": [
          {
            "name": "therapistsConnection",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "TherapistConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserMutationPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "User",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "User",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "SCALAR",
        "name": "Any"
      }
    ],
    "directives": []
  }
} as unknown as IntrospectionQuery;